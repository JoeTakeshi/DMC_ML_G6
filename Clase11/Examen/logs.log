2025-06-11 21:52:38,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:52:38,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:52:38,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:52:38,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:53:51,889:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:53:51,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:53:51,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:53:51,892:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 21:53:55,591:INFO:PyCaret ClassificationExperiment
2025-06-11 21:53:55,591:INFO:Logging name: fintech_credit
2025-06-11 21:53:55,591:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 21:53:55,592:INFO:version 3.3.2
2025-06-11 21:53:55,592:INFO:Initializing setup()
2025-06-11 21:53:55,592:INFO:self.USI: f5b4
2025-06-11 21:53:55,592:INFO:self._variable_keys: {'memory', 'USI', 'y_test', 'X', 'fold_shuffle_param', 'logging_param', 'y', 'y_train', 'fold_groups_param', 'gpu_param', '_available_plots', 'is_multiclass', 'target_param', 'fix_imbalance', 'log_plots_param', 'seed', 'X_train', 'n_jobs_param', 'X_test', 'fold_generator', 'idx', 'data', 'pipeline', 'exp_id', 'html_param', 'gpu_n_jobs_param', '_ml_usecase', 'exp_name_log'}
2025-06-11 21:53:55,592:INFO:Checking environment
2025-06-11 21:53:55,592:INFO:python_version: 3.11.0
2025-06-11 21:53:55,592:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 21:53:55,592:INFO:machine: AMD64
2025-06-11 21:53:55,605:INFO:platform: Windows-10-10.0.19045-SP0
2025-06-11 21:53:55,609:INFO:Memory: svmem(total=34286215168, available=18287439872, percent=46.7, used=15998775296, free=18287439872)
2025-06-11 21:53:55,609:INFO:Physical Core: 6
2025-06-11 21:53:55,609:INFO:Logical Core: 12
2025-06-11 21:53:55,609:INFO:Checking libraries
2025-06-11 21:53:55,609:INFO:System:
2025-06-11 21:53:55,609:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 21:53:55,609:INFO:executable: C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 21:53:55,609:INFO:   machine: Windows-10-10.0.19045-SP0
2025-06-11 21:53:55,609:INFO:PyCaret required dependencies:
2025-06-11 21:53:55,707:INFO:                 pip: 22.3
2025-06-11 21:53:55,707:INFO:          setuptools: 65.5.0
2025-06-11 21:53:55,707:INFO:             pycaret: 3.3.2
2025-06-11 21:53:55,707:INFO:             IPython: 9.2.0
2025-06-11 21:53:55,707:INFO:          ipywidgets: 8.1.7
2025-06-11 21:53:55,707:INFO:                tqdm: 4.67.1
2025-06-11 21:53:55,707:INFO:               numpy: 1.25.2
2025-06-11 21:53:55,707:INFO:              pandas: 1.5.3
2025-06-11 21:53:55,707:INFO:              jinja2: 3.1.6
2025-06-11 21:53:55,707:INFO:               scipy: 1.10.1
2025-06-11 21:53:55,707:INFO:              joblib: 1.3.2
2025-06-11 21:53:55,708:INFO:             sklearn: 1.4.2
2025-06-11 21:53:55,708:INFO:                pyod: 2.0.5
2025-06-11 21:53:55,708:INFO:            imblearn: 0.12.4
2025-06-11 21:53:55,708:INFO:   category_encoders: 2.7.0
2025-06-11 21:53:55,708:INFO:            lightgbm: 4.6.0
2025-06-11 21:53:55,708:INFO:               numba: 0.61.0
2025-06-11 21:53:55,708:INFO:            requests: 2.32.3
2025-06-11 21:53:55,708:INFO:          matplotlib: 3.6.0
2025-06-11 21:53:55,708:INFO:          scikitplot: 0.3.7
2025-06-11 21:53:55,708:INFO:         yellowbrick: 1.5
2025-06-11 21:53:55,708:INFO:              plotly: 5.24.1
2025-06-11 21:53:55,708:INFO:    plotly-resampler: Not installed
2025-06-11 21:53:55,708:INFO:             kaleido: 0.2.1
2025-06-11 21:53:55,708:INFO:           schemdraw: 0.15
2025-06-11 21:53:55,708:INFO:         statsmodels: 0.14.4
2025-06-11 21:53:55,708:INFO:              sktime: 0.26.0
2025-06-11 21:53:55,708:INFO:               tbats: 1.1.3
2025-06-11 21:53:55,708:INFO:            pmdarima: 2.0.4
2025-06-11 21:53:55,708:INFO:              psutil: 7.0.0
2025-06-11 21:53:55,709:INFO:          markupsafe: 3.0.2
2025-06-11 21:53:55,709:INFO:             pickle5: Not installed
2025-06-11 21:53:55,709:INFO:         cloudpickle: 2.2.1
2025-06-11 21:53:55,709:INFO:         deprecation: 2.1.0
2025-06-11 21:53:55,709:INFO:              xxhash: 3.5.0
2025-06-11 21:53:55,709:INFO:           wurlitzer: Not installed
2025-06-11 21:53:55,709:INFO:PyCaret optional dependencies:
2025-06-11 21:53:56,240:INFO:                shap: 0.44.1
2025-06-11 21:53:56,240:INFO:           interpret: 0.6.10
2025-06-11 21:53:56,240:INFO:                umap: 0.5.7
2025-06-11 21:53:56,240:INFO:     ydata_profiling: 4.16.1
2025-06-11 21:53:56,240:INFO:  explainerdashboard: 0.4.8
2025-06-11 21:53:56,240:INFO:             autoviz: Not installed
2025-06-11 21:53:56,240:INFO:           fairlearn: 0.7.0
2025-06-11 21:53:56,240:INFO:          deepchecks: Not installed
2025-06-11 21:53:56,240:INFO:             xgboost: Not installed
2025-06-11 21:53:56,240:INFO:            catboost: Not installed
2025-06-11 21:53:56,240:INFO:              kmodes: Not installed
2025-06-11 21:53:56,240:INFO:             mlxtend: Not installed
2025-06-11 21:53:56,240:INFO:       statsforecast: Not installed
2025-06-11 21:53:56,241:INFO:        tune_sklearn: Not installed
2025-06-11 21:53:56,241:INFO:                 ray: Not installed
2025-06-11 21:53:56,241:INFO:            hyperopt: Not installed
2025-06-11 21:53:56,241:INFO:              optuna: Not installed
2025-06-11 21:53:56,241:INFO:               skopt: Not installed
2025-06-11 21:53:56,241:INFO:              mlflow: 2.22.0
2025-06-11 21:53:56,241:INFO:              gradio: Not installed
2025-06-11 21:53:56,241:INFO:             fastapi: 0.115.12
2025-06-11 21:53:56,241:INFO:             uvicorn: 0.34.2
2025-06-11 21:53:56,241:INFO:              m2cgen: Not installed
2025-06-11 21:53:56,241:INFO:           evidently: Not installed
2025-06-11 21:53:56,241:INFO:               fugue: Not installed
2025-06-11 21:53:56,241:INFO:           streamlit: 1.45.1
2025-06-11 21:53:56,241:INFO:             prophet: Not installed
2025-06-11 21:53:56,241:INFO:None
2025-06-11 21:53:56,241:INFO:Set up data.
2025-06-11 21:53:56,250:INFO:Set up folding strategy.
2025-06-11 21:53:56,250:INFO:Set up train/test split.
2025-06-11 21:53:56,254:INFO:Set up index.
2025-06-11 21:53:56,254:INFO:Assigning column types.
2025-06-11 21:53:56,257:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 21:53:56,296:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,299:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,339:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,378:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,379:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,404:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,404:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,404:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 21:53:56,454:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,481:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,481:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,533:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 21:53:56,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,563:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 21:53:56,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,634:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,701:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,701:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,704:INFO:Preparing preprocessing pipeline...
2025-06-11 21:53:56,710:INFO:Set up simple imputation.
2025-06-11 21:53:56,712:INFO:Set up encoding of categorical features.
2025-06-11 21:53:56,712:INFO:Set up imbalanced handling.
2025-06-11 21:53:56,765:INFO:Finished creating preprocessing pipeline.
2025-06-11 21:53:56,773:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2025-06-11 21:53:56,773:INFO:Creating final display dataframe.
2025-06-11 21:53:56,923:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         approved
2                   Target type           Binary
3           Original data shape        (1000, 8)
4        Transformed data shape       (1176, 10)
5   Transformed train set shape        (876, 10)
6    Transformed test set shape        (300, 10)
7              Numeric features                6
8          Categorical features                1
9                    Preprocess             True
10              Imputation type           simple
11           Numeric imputation             mean
12       Categorical imputation             mode
13     Maximum one-hot encoding               25
14              Encoding method             None
15                Fix imbalance             True
16         Fix imbalance method            smote
17               Fold Generator  StratifiedKFold
18                  Fold Number               10
19                     CPU Jobs               -1
20                      Use GPU            False
21               Log Experiment     MlflowLogger
22              Experiment Name   fintech_credit
23                          USI             f5b4
2025-06-11 21:53:56,991:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:56,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:57,060:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:57,060:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 21:53:57,061:INFO:Logging experiment in loggers
2025-06-11 21:53:57,408:INFO:SubProcess save_model() called ==================================
2025-06-11 21:53:57,424:INFO:Initializing save_model()
2025-06-11 21:53:57,424:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), model_name=C:\Users\GGjoe\AppData\Local\Temp\tmpg9em3mow\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 21:53:57,424:INFO:Adding model into prep_pipe
2025-06-11 21:53:57,424:WARNING:Only Model saved as it was a pipeline.
2025-06-11 21:53:57,429:INFO:C:\Users\GGjoe\AppData\Local\Temp\tmpg9em3mow\Transformation Pipeline.pkl saved in current working directory
2025-06-11 21:53:57,436:INFO:Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2025-06-11 21:53:57,436:INFO:save_model() successfully completed......................................
2025-06-11 21:53:57,501:INFO:SubProcess save_model() end ==================================
2025-06-11 21:53:57,665:INFO:setup() successfully completed in 1.47s...............
2025-06-11 21:53:57,665:INFO:Initializing compare_models()
2025-06-11 21:53:57,665:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-11 21:53:57,665:INFO:Checking exceptions
2025-06-11 21:53:57,669:INFO:Preparing display monitor
2025-06-11 21:53:57,672:INFO:Initializing Logistic Regression
2025-06-11 21:53:57,672:INFO:Total runtime is 0.0 minutes
2025-06-11 21:53:57,672:INFO:SubProcess create_model() called ==================================
2025-06-11 21:53:57,672:INFO:Initializing create_model()
2025-06-11 21:53:57,672:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:53:57,672:INFO:Checking exceptions
2025-06-11 21:53:57,672:INFO:Importing libraries
2025-06-11 21:53:57,672:INFO:Copying training dataset
2025-06-11 21:53:57,675:INFO:Defining folds
2025-06-11 21:53:57,675:INFO:Declaring metric variables
2025-06-11 21:53:57,676:INFO:Importing untrained model
2025-06-11 21:53:57,676:INFO:Logistic Regression Imported successfully
2025-06-11 21:53:57,676:INFO:Starting cross validation
2025-06-11 21:53:57,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:03,094:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,184:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,192:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,200:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,218:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,248:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,259:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,277:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,286:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,358:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 21:54:03,401:INFO:Calculating mean and std
2025-06-11 21:54:03,402:INFO:Creating metrics dataframe
2025-06-11 21:54:03,405:INFO:Uploading results into container
2025-06-11 21:54:03,405:INFO:Uploading model into container now
2025-06-11 21:54:03,405:INFO:_master_model_container: 1
2025-06-11 21:54:03,405:INFO:_display_container: 2
2025-06-11 21:54:03,406:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-11 21:54:03,406:INFO:create_model() successfully completed......................................
2025-06-11 21:54:03,476:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:03,476:INFO:Creating metrics dataframe
2025-06-11 21:54:03,479:INFO:Initializing K Neighbors Classifier
2025-06-11 21:54:03,479:INFO:Total runtime is 0.09677493969599406 minutes
2025-06-11 21:54:03,479:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:03,480:INFO:Initializing create_model()
2025-06-11 21:54:03,480:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:03,480:INFO:Checking exceptions
2025-06-11 21:54:03,480:INFO:Importing libraries
2025-06-11 21:54:03,480:INFO:Copying training dataset
2025-06-11 21:54:03,482:INFO:Defining folds
2025-06-11 21:54:03,482:INFO:Declaring metric variables
2025-06-11 21:54:03,482:INFO:Importing untrained model
2025-06-11 21:54:03,483:INFO:K Neighbors Classifier Imported successfully
2025-06-11 21:54:03,483:INFO:Starting cross validation
2025-06-11 21:54:03,484:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:06,381:INFO:Calculating mean and std
2025-06-11 21:54:06,382:INFO:Creating metrics dataframe
2025-06-11 21:54:06,384:INFO:Uploading results into container
2025-06-11 21:54:06,385:INFO:Uploading model into container now
2025-06-11 21:54:06,385:INFO:_master_model_container: 2
2025-06-11 21:54:06,385:INFO:_display_container: 2
2025-06-11 21:54:06,385:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-11 21:54:06,385:INFO:create_model() successfully completed......................................
2025-06-11 21:54:06,451:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:06,451:INFO:Creating metrics dataframe
2025-06-11 21:54:06,455:INFO:Initializing Naive Bayes
2025-06-11 21:54:06,455:INFO:Total runtime is 0.14637860854466755 minutes
2025-06-11 21:54:06,455:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:06,455:INFO:Initializing create_model()
2025-06-11 21:54:06,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:06,455:INFO:Checking exceptions
2025-06-11 21:54:06,455:INFO:Importing libraries
2025-06-11 21:54:06,455:INFO:Copying training dataset
2025-06-11 21:54:06,458:INFO:Defining folds
2025-06-11 21:54:06,458:INFO:Declaring metric variables
2025-06-11 21:54:06,458:INFO:Importing untrained model
2025-06-11 21:54:06,458:INFO:Naive Bayes Imported successfully
2025-06-11 21:54:06,458:INFO:Starting cross validation
2025-06-11 21:54:06,459:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:06,581:INFO:Calculating mean and std
2025-06-11 21:54:06,581:INFO:Creating metrics dataframe
2025-06-11 21:54:06,584:INFO:Uploading results into container
2025-06-11 21:54:06,584:INFO:Uploading model into container now
2025-06-11 21:54:06,584:INFO:_master_model_container: 3
2025-06-11 21:54:06,584:INFO:_display_container: 2
2025-06-11 21:54:06,585:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-11 21:54:06,585:INFO:create_model() successfully completed......................................
2025-06-11 21:54:06,651:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:06,651:INFO:Creating metrics dataframe
2025-06-11 21:54:06,654:INFO:Initializing Decision Tree Classifier
2025-06-11 21:54:06,654:INFO:Total runtime is 0.14969621896743773 minutes
2025-06-11 21:54:06,654:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:06,655:INFO:Initializing create_model()
2025-06-11 21:54:06,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:06,655:INFO:Checking exceptions
2025-06-11 21:54:06,655:INFO:Importing libraries
2025-06-11 21:54:06,655:INFO:Copying training dataset
2025-06-11 21:54:06,658:INFO:Defining folds
2025-06-11 21:54:06,658:INFO:Declaring metric variables
2025-06-11 21:54:06,658:INFO:Importing untrained model
2025-06-11 21:54:06,658:INFO:Decision Tree Classifier Imported successfully
2025-06-11 21:54:06,658:INFO:Starting cross validation
2025-06-11 21:54:06,659:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:06,776:INFO:Calculating mean and std
2025-06-11 21:54:06,776:INFO:Creating metrics dataframe
2025-06-11 21:54:06,779:INFO:Uploading results into container
2025-06-11 21:54:06,779:INFO:Uploading model into container now
2025-06-11 21:54:06,780:INFO:_master_model_container: 4
2025-06-11 21:54:06,780:INFO:_display_container: 2
2025-06-11 21:54:06,780:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-06-11 21:54:06,780:INFO:create_model() successfully completed......................................
2025-06-11 21:54:06,847:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:06,847:INFO:Creating metrics dataframe
2025-06-11 21:54:06,851:INFO:Initializing SVM - Linear Kernel
2025-06-11 21:54:06,851:INFO:Total runtime is 0.15297179619471232 minutes
2025-06-11 21:54:06,851:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:06,851:INFO:Initializing create_model()
2025-06-11 21:54:06,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:06,851:INFO:Checking exceptions
2025-06-11 21:54:06,851:INFO:Importing libraries
2025-06-11 21:54:06,851:INFO:Copying training dataset
2025-06-11 21:54:06,854:INFO:Defining folds
2025-06-11 21:54:06,854:INFO:Declaring metric variables
2025-06-11 21:54:06,854:INFO:Importing untrained model
2025-06-11 21:54:06,855:INFO:SVM - Linear Kernel Imported successfully
2025-06-11 21:54:06,855:INFO:Starting cross validation
2025-06-11 21:54:06,856:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:06,963:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:06,969:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:06,982:INFO:Calculating mean and std
2025-06-11 21:54:06,982:INFO:Creating metrics dataframe
2025-06-11 21:54:06,985:INFO:Uploading results into container
2025-06-11 21:54:06,985:INFO:Uploading model into container now
2025-06-11 21:54:06,985:INFO:_master_model_container: 5
2025-06-11 21:54:06,985:INFO:_display_container: 2
2025-06-11 21:54:06,986:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-11 21:54:06,986:INFO:create_model() successfully completed......................................
2025-06-11 21:54:07,050:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:07,050:INFO:Creating metrics dataframe
2025-06-11 21:54:07,054:INFO:Initializing Ridge Classifier
2025-06-11 21:54:07,054:INFO:Total runtime is 0.1563558618227641 minutes
2025-06-11 21:54:07,054:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:07,054:INFO:Initializing create_model()
2025-06-11 21:54:07,054:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:07,054:INFO:Checking exceptions
2025-06-11 21:54:07,054:INFO:Importing libraries
2025-06-11 21:54:07,054:INFO:Copying training dataset
2025-06-11 21:54:07,057:INFO:Defining folds
2025-06-11 21:54:07,057:INFO:Declaring metric variables
2025-06-11 21:54:07,057:INFO:Importing untrained model
2025-06-11 21:54:07,057:INFO:Ridge Classifier Imported successfully
2025-06-11 21:54:07,058:INFO:Starting cross validation
2025-06-11 21:54:07,059:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:07,179:INFO:Calculating mean and std
2025-06-11 21:54:07,179:INFO:Creating metrics dataframe
2025-06-11 21:54:07,182:INFO:Uploading results into container
2025-06-11 21:54:07,182:INFO:Uploading model into container now
2025-06-11 21:54:07,182:INFO:_master_model_container: 6
2025-06-11 21:54:07,182:INFO:_display_container: 2
2025-06-11 21:54:07,183:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-06-11 21:54:07,183:INFO:create_model() successfully completed......................................
2025-06-11 21:54:07,248:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:07,248:INFO:Creating metrics dataframe
2025-06-11 21:54:07,253:INFO:Initializing Random Forest Classifier
2025-06-11 21:54:07,253:INFO:Total runtime is 0.15967318614323936 minutes
2025-06-11 21:54:07,253:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:07,253:INFO:Initializing create_model()
2025-06-11 21:54:07,253:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:07,253:INFO:Checking exceptions
2025-06-11 21:54:07,253:INFO:Importing libraries
2025-06-11 21:54:07,253:INFO:Copying training dataset
2025-06-11 21:54:07,256:INFO:Defining folds
2025-06-11 21:54:07,256:INFO:Declaring metric variables
2025-06-11 21:54:07,256:INFO:Importing untrained model
2025-06-11 21:54:07,256:INFO:Random Forest Classifier Imported successfully
2025-06-11 21:54:07,257:INFO:Starting cross validation
2025-06-11 21:54:07,258:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:07,696:INFO:Calculating mean and std
2025-06-11 21:54:07,696:INFO:Creating metrics dataframe
2025-06-11 21:54:07,699:INFO:Uploading results into container
2025-06-11 21:54:07,699:INFO:Uploading model into container now
2025-06-11 21:54:07,700:INFO:_master_model_container: 7
2025-06-11 21:54:07,700:INFO:_display_container: 2
2025-06-11 21:54:07,700:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-06-11 21:54:07,700:INFO:create_model() successfully completed......................................
2025-06-11 21:54:07,767:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:07,767:INFO:Creating metrics dataframe
2025-06-11 21:54:07,771:INFO:Initializing Quadratic Discriminant Analysis
2025-06-11 21:54:07,771:INFO:Total runtime is 0.16830581823984783 minutes
2025-06-11 21:54:07,771:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:07,771:INFO:Initializing create_model()
2025-06-11 21:54:07,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:07,772:INFO:Checking exceptions
2025-06-11 21:54:07,772:INFO:Importing libraries
2025-06-11 21:54:07,772:INFO:Copying training dataset
2025-06-11 21:54:07,775:INFO:Defining folds
2025-06-11 21:54:07,775:INFO:Declaring metric variables
2025-06-11 21:54:07,775:INFO:Importing untrained model
2025-06-11 21:54:07,775:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-11 21:54:07,775:INFO:Starting cross validation
2025-06-11 21:54:07,776:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,866:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 21:54:07,906:INFO:Calculating mean and std
2025-06-11 21:54:07,906:INFO:Creating metrics dataframe
2025-06-11 21:54:07,909:INFO:Uploading results into container
2025-06-11 21:54:07,909:INFO:Uploading model into container now
2025-06-11 21:54:07,909:INFO:_master_model_container: 8
2025-06-11 21:54:07,909:INFO:_display_container: 2
2025-06-11 21:54:07,910:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-11 21:54:07,910:INFO:create_model() successfully completed......................................
2025-06-11 21:54:07,971:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:07,971:INFO:Creating metrics dataframe
2025-06-11 21:54:07,975:INFO:Initializing Ada Boost Classifier
2025-06-11 21:54:07,975:INFO:Total runtime is 0.1717061201731364 minutes
2025-06-11 21:54:07,975:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:07,976:INFO:Initializing create_model()
2025-06-11 21:54:07,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:07,976:INFO:Checking exceptions
2025-06-11 21:54:07,976:INFO:Importing libraries
2025-06-11 21:54:07,976:INFO:Copying training dataset
2025-06-11 21:54:07,978:INFO:Defining folds
2025-06-11 21:54:07,978:INFO:Declaring metric variables
2025-06-11 21:54:07,978:INFO:Importing untrained model
2025-06-11 21:54:07,979:INFO:Ada Boost Classifier Imported successfully
2025-06-11 21:54:07,979:INFO:Starting cross validation
2025-06-11 21:54:07,980:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:08,039:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,039:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,044:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,046:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,046:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,047:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,049:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,051:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,061:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,061:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:08,240:INFO:Calculating mean and std
2025-06-11 21:54:08,240:INFO:Creating metrics dataframe
2025-06-11 21:54:08,243:INFO:Uploading results into container
2025-06-11 21:54:08,243:INFO:Uploading model into container now
2025-06-11 21:54:08,243:INFO:_master_model_container: 9
2025-06-11 21:54:08,243:INFO:_display_container: 2
2025-06-11 21:54:08,244:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-11 21:54:08,244:INFO:create_model() successfully completed......................................
2025-06-11 21:54:08,308:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:08,308:INFO:Creating metrics dataframe
2025-06-11 21:54:08,312:INFO:Initializing Gradient Boosting Classifier
2025-06-11 21:54:08,312:INFO:Total runtime is 0.17732460498809816 minutes
2025-06-11 21:54:08,312:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:08,312:INFO:Initializing create_model()
2025-06-11 21:54:08,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:08,312:INFO:Checking exceptions
2025-06-11 21:54:08,313:INFO:Importing libraries
2025-06-11 21:54:08,313:INFO:Copying training dataset
2025-06-11 21:54:08,315:INFO:Defining folds
2025-06-11 21:54:08,315:INFO:Declaring metric variables
2025-06-11 21:54:08,315:INFO:Importing untrained model
2025-06-11 21:54:08,315:INFO:Gradient Boosting Classifier Imported successfully
2025-06-11 21:54:08,316:INFO:Starting cross validation
2025-06-11 21:54:08,317:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:08,685:INFO:Calculating mean and std
2025-06-11 21:54:08,685:INFO:Creating metrics dataframe
2025-06-11 21:54:08,688:INFO:Uploading results into container
2025-06-11 21:54:08,688:INFO:Uploading model into container now
2025-06-11 21:54:08,688:INFO:_master_model_container: 10
2025-06-11 21:54:08,689:INFO:_display_container: 2
2025-06-11 21:54:08,689:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-11 21:54:08,689:INFO:create_model() successfully completed......................................
2025-06-11 21:54:08,751:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:08,751:INFO:Creating metrics dataframe
2025-06-11 21:54:08,755:INFO:Initializing Linear Discriminant Analysis
2025-06-11 21:54:08,755:INFO:Total runtime is 0.18470542033513387 minutes
2025-06-11 21:54:08,755:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:08,755:INFO:Initializing create_model()
2025-06-11 21:54:08,755:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:08,755:INFO:Checking exceptions
2025-06-11 21:54:08,756:INFO:Importing libraries
2025-06-11 21:54:08,756:INFO:Copying training dataset
2025-06-11 21:54:08,758:INFO:Defining folds
2025-06-11 21:54:08,758:INFO:Declaring metric variables
2025-06-11 21:54:08,759:INFO:Importing untrained model
2025-06-11 21:54:08,759:INFO:Linear Discriminant Analysis Imported successfully
2025-06-11 21:54:08,759:INFO:Starting cross validation
2025-06-11 21:54:08,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:08,870:INFO:Calculating mean and std
2025-06-11 21:54:08,870:INFO:Creating metrics dataframe
2025-06-11 21:54:08,873:INFO:Uploading results into container
2025-06-11 21:54:08,873:INFO:Uploading model into container now
2025-06-11 21:54:08,873:INFO:_master_model_container: 11
2025-06-11 21:54:08,873:INFO:_display_container: 2
2025-06-11 21:54:08,874:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-11 21:54:08,874:INFO:create_model() successfully completed......................................
2025-06-11 21:54:08,936:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:08,936:INFO:Creating metrics dataframe
2025-06-11 21:54:08,940:INFO:Initializing Extra Trees Classifier
2025-06-11 21:54:08,940:INFO:Total runtime is 0.18780102729797363 minutes
2025-06-11 21:54:08,940:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:08,940:INFO:Initializing create_model()
2025-06-11 21:54:08,940:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:08,940:INFO:Checking exceptions
2025-06-11 21:54:08,940:INFO:Importing libraries
2025-06-11 21:54:08,940:INFO:Copying training dataset
2025-06-11 21:54:08,943:INFO:Defining folds
2025-06-11 21:54:08,943:INFO:Declaring metric variables
2025-06-11 21:54:08,943:INFO:Importing untrained model
2025-06-11 21:54:08,943:INFO:Extra Trees Classifier Imported successfully
2025-06-11 21:54:08,943:INFO:Starting cross validation
2025-06-11 21:54:08,944:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:09,345:INFO:Calculating mean and std
2025-06-11 21:54:09,345:INFO:Creating metrics dataframe
2025-06-11 21:54:09,348:INFO:Uploading results into container
2025-06-11 21:54:09,348:INFO:Uploading model into container now
2025-06-11 21:54:09,348:INFO:_master_model_container: 12
2025-06-11 21:54:09,348:INFO:_display_container: 2
2025-06-11 21:54:09,349:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-06-11 21:54:09,349:INFO:create_model() successfully completed......................................
2025-06-11 21:54:09,409:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:09,409:INFO:Creating metrics dataframe
2025-06-11 21:54:09,414:INFO:Initializing Light Gradient Boosting Machine
2025-06-11 21:54:09,414:INFO:Total runtime is 0.19570047458012899 minutes
2025-06-11 21:54:09,415:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:09,415:INFO:Initializing create_model()
2025-06-11 21:54:09,415:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:09,415:INFO:Checking exceptions
2025-06-11 21:54:09,415:INFO:Importing libraries
2025-06-11 21:54:09,415:INFO:Copying training dataset
2025-06-11 21:54:09,417:INFO:Defining folds
2025-06-11 21:54:09,417:INFO:Declaring metric variables
2025-06-11 21:54:09,418:INFO:Importing untrained model
2025-06-11 21:54:09,418:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 21:54:09,418:INFO:Starting cross validation
2025-06-11 21:54:09,419:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:10,301:INFO:Calculating mean and std
2025-06-11 21:54:10,302:INFO:Creating metrics dataframe
2025-06-11 21:54:10,306:INFO:Uploading results into container
2025-06-11 21:54:10,306:INFO:Uploading model into container now
2025-06-11 21:54:10,307:INFO:_master_model_container: 13
2025-06-11 21:54:10,307:INFO:_display_container: 2
2025-06-11 21:54:10,307:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 21:54:10,307:INFO:create_model() successfully completed......................................
2025-06-11 21:54:10,390:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:10,390:INFO:Creating metrics dataframe
2025-06-11 21:54:10,393:INFO:Initializing Dummy Classifier
2025-06-11 21:54:10,394:INFO:Total runtime is 0.21203545729319254 minutes
2025-06-11 21:54:10,394:INFO:SubProcess create_model() called ==================================
2025-06-11 21:54:10,394:INFO:Initializing create_model()
2025-06-11 21:54:10,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027A7B1B2050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:10,394:INFO:Checking exceptions
2025-06-11 21:54:10,394:INFO:Importing libraries
2025-06-11 21:54:10,394:INFO:Copying training dataset
2025-06-11 21:54:10,397:INFO:Defining folds
2025-06-11 21:54:10,397:INFO:Declaring metric variables
2025-06-11 21:54:10,397:INFO:Importing untrained model
2025-06-11 21:54:10,397:INFO:Dummy Classifier Imported successfully
2025-06-11 21:54:10,397:INFO:Starting cross validation
2025-06-11 21:54:10,398:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 21:54:10,488:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,492:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,493:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,494:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,498:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,501:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,504:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,504:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,505:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,518:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-11 21:54:10,530:INFO:Calculating mean and std
2025-06-11 21:54:10,530:INFO:Creating metrics dataframe
2025-06-11 21:54:10,533:INFO:Uploading results into container
2025-06-11 21:54:10,534:INFO:Uploading model into container now
2025-06-11 21:54:10,534:INFO:_master_model_container: 14
2025-06-11 21:54:10,534:INFO:_display_container: 2
2025-06-11 21:54:10,534:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-06-11 21:54:10,534:INFO:create_model() successfully completed......................................
2025-06-11 21:54:10,600:INFO:SubProcess create_model() end ==================================
2025-06-11 21:54:10,600:INFO:Creating metrics dataframe
2025-06-11 21:54:10,607:INFO:Initializing create_model()
2025-06-11 21:54:10,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 21:54:10,607:INFO:Checking exceptions
2025-06-11 21:54:10,608:INFO:Importing libraries
2025-06-11 21:54:10,608:INFO:Copying training dataset
2025-06-11 21:54:10,610:INFO:Defining folds
2025-06-11 21:54:10,611:INFO:Declaring metric variables
2025-06-11 21:54:10,611:INFO:Importing untrained model
2025-06-11 21:54:10,611:INFO:Declaring custom model
2025-06-11 21:54:10,611:INFO:Ada Boost Classifier Imported successfully
2025-06-11 21:54:10,612:INFO:Cross validation set to False
2025-06-11 21:54:10,612:INFO:Fitting Model
2025-06-11 21:54:10,645:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-11 21:54:10,729:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-11 21:54:10,729:INFO:create_model() successfully completed......................................
2025-06-11 21:54:10,793:INFO:Creating Dashboard logs
2025-06-11 21:54:10,793:INFO:Model: Ada Boost Classifier
2025-06-11 21:54:10,877:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 123}
2025-06-11 21:54:11,153:INFO:Initializing predict_model()
2025-06-11 21:54:11,153:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027A78E43990>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000027A7B394900>)
2025-06-11 21:54:11,153:INFO:Checking exceptions
2025-06-11 21:54:11,153:INFO:Preloading libraries
2025-06-11 21:54:11,321:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 21:54:11,485:INFO:Creating Dashboard logs
2025-06-11 21:54:11,485:INFO:Model: Light Gradient Boosting Machine
2025-06-11 21:54:11,556:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 21:54:11,976:INFO:Creating Dashboard logs
2025-06-11 21:54:11,977:INFO:Model: Decision Tree Classifier
2025-06-11 21:54:12,052:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 123, 'splitter': 'best'}
2025-06-11 21:54:12,463:INFO:Creating Dashboard logs
2025-06-11 21:54:12,463:INFO:Model: Random Forest Classifier
2025-06-11 21:54:12,535:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-06-11 21:54:12,948:INFO:Creating Dashboard logs
2025-06-11 21:54:12,948:INFO:Model: Gradient Boosting Classifier
2025-06-11 21:54:13,024:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 123, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 21:54:13,457:INFO:Creating Dashboard logs
2025-06-11 21:54:13,457:INFO:Model: Extra Trees Classifier
2025-06-11 21:54:13,534:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-06-11 21:54:13,953:INFO:Creating Dashboard logs
2025-06-11 21:54:13,954:INFO:Model: Logistic Regression
2025-06-11 21:54:14,030:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 123, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-06-11 21:54:14,451:INFO:Creating Dashboard logs
2025-06-11 21:54:14,451:INFO:Model: Ridge Classifier
2025-06-11 21:54:14,525:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 123, 'solver': 'auto', 'tol': 0.0001}
2025-06-11 21:54:14,944:INFO:Creating Dashboard logs
2025-06-11 21:54:14,944:INFO:Model: Linear Discriminant Analysis
2025-06-11 21:54:15,022:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-06-11 21:54:15,424:INFO:Creating Dashboard logs
2025-06-11 21:54:15,425:INFO:Model: Naive Bayes
2025-06-11 21:54:15,500:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-06-11 21:54:15,896:INFO:Creating Dashboard logs
2025-06-11 21:54:15,896:INFO:Model: K Neighbors Classifier
2025-06-11 21:54:15,971:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-06-11 21:54:16,375:INFO:Creating Dashboard logs
2025-06-11 21:54:16,375:INFO:Model: Quadratic Discriminant Analysis
2025-06-11 21:54:16,449:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-06-11 21:54:16,843:INFO:Creating Dashboard logs
2025-06-11 21:54:16,843:INFO:Model: Dummy Classifier
2025-06-11 21:54:16,920:INFO:Logged params: {'constant': None, 'random_state': 123, 'strategy': 'prior'}
2025-06-11 21:54:17,299:INFO:Creating Dashboard logs
2025-06-11 21:54:17,299:INFO:Model: SVM - Linear Kernel
2025-06-11 21:54:17,378:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 123, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 21:54:17,809:INFO:_master_model_container: 14
2025-06-11 21:54:17,810:INFO:_display_container: 2
2025-06-11 21:54:17,810:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-11 21:54:17,810:INFO:compare_models() successfully completed......................................
2025-06-11 21:54:17,816:INFO:Initializing save_model()
2025-06-11 21:54:17,816:INFO:save_model(model=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), model_name=propension_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 21:54:17,816:INFO:Adding model into prep_pipe
2025-06-11 21:54:17,833:INFO:propension_model.pkl saved in current working directory
2025-06-11 21:54:17,840:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto')))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=123))],
         verbose=False)
2025-06-11 21:54:17,840:INFO:save_model() successfully completed......................................
2025-06-11 22:07:31,152:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:07:31,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:07:31,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:07:31,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:07:31,293:INFO:Initializing load_model()
2025-06-11 22:07:31,293:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-11 22:08:03,083:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:08:03,083:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:08:03,083:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:08:03,083:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 22:08:03,262:INFO:Initializing load_model()
2025-06-11 22:08:03,262:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-11 22:11:44,703:INFO:Initializing predict_model()
2025-06-11 22:11:44,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A994128D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD23958A0>)
2025-06-11 22:11:44,703:INFO:Checking exceptions
2025-06-11 22:11:44,703:INFO:Preloading libraries
2025-06-11 22:11:44,703:INFO:Set up data.
2025-06-11 22:11:44,707:INFO:Set up index.
2025-06-11 22:11:46,464:INFO:Initializing predict_model()
2025-06-11 22:11:46,464:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22ED150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2395D00>)
2025-06-11 22:11:46,464:INFO:Checking exceptions
2025-06-11 22:11:46,464:INFO:Preloading libraries
2025-06-11 22:11:46,464:INFO:Set up data.
2025-06-11 22:11:46,467:INFO:Set up index.
2025-06-11 22:12:08,865:INFO:Initializing predict_model()
2025-06-11 22:12:08,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22EB410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2396660>)
2025-06-11 22:12:08,865:INFO:Checking exceptions
2025-06-11 22:12:08,865:INFO:Preloading libraries
2025-06-11 22:12:08,866:INFO:Set up data.
2025-06-11 22:12:08,869:INFO:Set up index.
2025-06-11 22:14:34,799:INFO:Initializing predict_model()
2025-06-11 22:14:34,799:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22E6990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020ACE390EA0>)
2025-06-11 22:14:34,799:INFO:Checking exceptions
2025-06-11 22:14:34,799:INFO:Preloading libraries
2025-06-11 22:14:34,799:INFO:Set up data.
2025-06-11 22:14:34,801:INFO:Set up index.
2025-06-11 22:47:21,662:INFO:Initializing predict_model()
2025-06-11 22:47:21,662:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD1068C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD23E5800>)
2025-06-11 22:47:21,662:INFO:Checking exceptions
2025-06-11 22:47:21,663:INFO:Preloading libraries
2025-06-11 22:47:21,663:INFO:Set up data.
2025-06-11 22:47:21,665:INFO:Set up index.
2025-06-11 22:47:22,375:INFO:Initializing predict_model()
2025-06-11 22:47:22,375:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD230B950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2395580>)
2025-06-11 22:47:22,375:INFO:Checking exceptions
2025-06-11 22:47:22,375:INFO:Preloading libraries
2025-06-11 22:47:22,376:INFO:Set up data.
2025-06-11 22:47:22,378:INFO:Set up index.
2025-06-11 22:47:40,120:INFO:Initializing predict_model()
2025-06-11 22:47:40,120:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22AEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2395760>)
2025-06-11 22:47:40,121:INFO:Checking exceptions
2025-06-11 22:47:40,121:INFO:Preloading libraries
2025-06-11 22:47:40,121:INFO:Set up data.
2025-06-11 22:47:40,123:INFO:Set up index.
2025-06-11 22:52:45,620:INFO:Initializing predict_model()
2025-06-11 22:52:45,620:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2304D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD23953A0>)
2025-06-11 22:52:45,620:INFO:Checking exceptions
2025-06-11 22:52:45,620:INFO:Preloading libraries
2025-06-11 22:52:45,620:INFO:Set up data.
2025-06-11 22:52:45,623:INFO:Set up index.
2025-06-11 22:52:57,897:INFO:Initializing predict_model()
2025-06-11 22:52:57,897:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2305150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2314720>)
2025-06-11 22:52:57,898:INFO:Checking exceptions
2025-06-11 22:52:57,898:INFO:Preloading libraries
2025-06-11 22:52:57,898:INFO:Set up data.
2025-06-11 22:52:57,900:INFO:Set up index.
2025-06-11 22:53:18,211:INFO:Initializing predict_model()
2025-06-11 22:53:18,211:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2309210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2314720>)
2025-06-11 22:53:18,211:INFO:Checking exceptions
2025-06-11 22:53:18,211:INFO:Preloading libraries
2025-06-11 22:53:18,211:INFO:Set up data.
2025-06-11 22:53:18,213:INFO:Set up index.
2025-06-11 22:53:46,179:INFO:Initializing predict_model()
2025-06-11 22:53:46,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22AFA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2314540>)
2025-06-11 22:53:46,179:INFO:Checking exceptions
2025-06-11 22:53:46,179:INFO:Preloading libraries
2025-06-11 22:53:46,179:INFO:Set up data.
2025-06-11 22:53:46,182:INFO:Set up index.
2025-06-11 22:53:56,305:INFO:Initializing predict_model()
2025-06-11 22:53:56,305:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2305B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020ACE390220>)
2025-06-11 22:53:56,305:INFO:Checking exceptions
2025-06-11 22:53:56,305:INFO:Preloading libraries
2025-06-11 22:53:56,305:INFO:Set up data.
2025-06-11 22:53:56,308:INFO:Set up index.
2025-06-11 22:53:57,004:INFO:Initializing predict_model()
2025-06-11 22:53:57,004:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2307150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020ACE390220>)
2025-06-11 22:53:57,004:INFO:Checking exceptions
2025-06-11 22:53:57,004:INFO:Preloading libraries
2025-06-11 22:53:57,004:INFO:Set up data.
2025-06-11 22:53:57,008:INFO:Set up index.
2025-06-11 22:54:30,098:INFO:Initializing predict_model()
2025-06-11 22:54:30,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD230B210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020A99404C20>)
2025-06-11 22:54:30,098:INFO:Checking exceptions
2025-06-11 22:54:30,098:INFO:Preloading libraries
2025-06-11 22:54:30,099:INFO:Set up data.
2025-06-11 22:54:30,101:INFO:Set up index.
2025-06-11 22:54:47,649:INFO:Initializing predict_model()
2025-06-11 22:54:47,649:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD23082D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020ACE390E00>)
2025-06-11 22:54:47,649:INFO:Checking exceptions
2025-06-11 22:54:47,649:INFO:Preloading libraries
2025-06-11 22:54:47,649:INFO:Set up data.
2025-06-11 22:54:47,651:INFO:Set up index.
2025-06-11 22:55:11,719:INFO:Initializing predict_model()
2025-06-11 22:55:11,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD230B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD23968E0>)
2025-06-11 22:55:11,719:INFO:Checking exceptions
2025-06-11 22:55:11,719:INFO:Preloading libraries
2025-06-11 22:55:11,719:INFO:Set up data.
2025-06-11 22:55:11,722:INFO:Set up index.
2025-06-11 22:55:44,538:INFO:Initializing predict_model()
2025-06-11 22:55:44,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD2304F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020ACE390360>)
2025-06-11 22:55:44,538:INFO:Checking exceptions
2025-06-11 22:55:44,538:INFO:Preloading libraries
2025-06-11 22:55:44,538:INFO:Set up data.
2025-06-11 22:55:44,540:INFO:Set up index.
2025-06-11 23:55:13,365:INFO:Initializing predict_model()
2025-06-11 23:55:13,365:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22E4F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2395EE0>)
2025-06-11 23:55:13,365:INFO:Checking exceptions
2025-06-11 23:55:13,366:INFO:Preloading libraries
2025-06-11 23:55:13,366:INFO:Set up data.
2025-06-11 23:55:13,368:INFO:Set up index.
2025-06-11 23:55:14,254:INFO:Initializing predict_model()
2025-06-11 23:55:14,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020AD22AD610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020AD2314540>)
2025-06-11 23:55:14,254:INFO:Checking exceptions
2025-06-11 23:55:14,254:INFO:Preloading libraries
2025-06-11 23:55:14,254:INFO:Set up data.
2025-06-11 23:55:14,256:INFO:Set up index.
2025-06-11 23:58:18,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 23:58:18,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 23:58:18,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 23:58:18,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 23:58:19,081:INFO:Initializing load_model()
2025-06-11 23:58:19,081:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-11 23:59:55,386:INFO:Initializing predict_model()
2025-06-11 23:59:55,386:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F34F750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026216F9B740>)
2025-06-11 23:59:55,386:INFO:Checking exceptions
2025-06-11 23:59:55,386:INFO:Preloading libraries
2025-06-11 23:59:55,387:INFO:Set up data.
2025-06-11 23:59:55,390:INFO:Set up index.
2025-06-12 00:08:18,561:INFO:Initializing predict_model()
2025-06-12 00:08:18,561:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F50A550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262506153A0>)
2025-06-12 00:08:18,561:INFO:Checking exceptions
2025-06-12 00:08:18,561:INFO:Preloading libraries
2025-06-12 00:08:18,561:INFO:Set up data.
2025-06-12 00:08:18,564:INFO:Set up index.
2025-06-12 00:09:24,512:INFO:Initializing predict_model()
2025-06-12 00:09:24,512:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625050AD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505331A0>)
2025-06-12 00:09:24,512:INFO:Checking exceptions
2025-06-12 00:09:24,512:INFO:Preloading libraries
2025-06-12 00:09:24,512:INFO:Set up data.
2025-06-12 00:09:24,514:INFO:Set up index.
2025-06-12 00:09:43,205:INFO:Initializing predict_model()
2025-06-12 00:09:43,205:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F50AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002621773BC40>)
2025-06-12 00:09:43,205:INFO:Checking exceptions
2025-06-12 00:09:43,205:INFO:Preloading libraries
2025-06-12 00:09:43,205:INFO:Set up data.
2025-06-12 00:09:43,208:INFO:Set up index.
2025-06-12 00:11:23,800:INFO:Initializing predict_model()
2025-06-12 00:11:23,800:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625050A090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C6F20>)
2025-06-12 00:11:23,800:INFO:Checking exceptions
2025-06-12 00:11:23,800:INFO:Preloading libraries
2025-06-12 00:11:23,801:INFO:Set up data.
2025-06-12 00:11:23,803:INFO:Set up index.
2025-06-12 00:11:28,974:INFO:Initializing predict_model()
2025-06-12 00:11:28,974:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625051EED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C76A0>)
2025-06-12 00:11:28,974:INFO:Checking exceptions
2025-06-12 00:11:28,974:INFO:Preloading libraries
2025-06-12 00:11:28,974:INFO:Set up data.
2025-06-12 00:11:28,977:INFO:Set up index.
2025-06-12 00:12:23,152:INFO:Initializing predict_model()
2025-06-12 00:12:23,152:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625051A0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C56C0>)
2025-06-12 00:12:23,152:INFO:Checking exceptions
2025-06-12 00:12:23,152:INFO:Preloading libraries
2025-06-12 00:12:23,152:INFO:Set up data.
2025-06-12 00:12:23,154:INFO:Set up index.
2025-06-12 00:12:29,837:INFO:Initializing predict_model()
2025-06-12 00:12:29,837:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F509310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C67A0>)
2025-06-12 00:12:29,837:INFO:Checking exceptions
2025-06-12 00:12:29,837:INFO:Preloading libraries
2025-06-12 00:12:29,837:INFO:Set up data.
2025-06-12 00:12:29,839:INFO:Set up index.
2025-06-12 00:12:40,288:INFO:Initializing predict_model()
2025-06-12 00:12:40,288:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625051EED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C58A0>)
2025-06-12 00:12:40,288:INFO:Checking exceptions
2025-06-12 00:12:40,288:INFO:Preloading libraries
2025-06-12 00:12:40,288:INFO:Set up data.
2025-06-12 00:12:40,290:INFO:Set up index.
2025-06-12 00:13:31,602:INFO:Initializing predict_model()
2025-06-12 00:13:31,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F50A150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C6F20>)
2025-06-12 00:13:31,602:INFO:Checking exceptions
2025-06-12 00:13:31,602:INFO:Preloading libraries
2025-06-12 00:13:31,602:INFO:Set up data.
2025-06-12 00:13:31,604:INFO:Set up index.
2025-06-12 00:13:36,936:INFO:Initializing predict_model()
2025-06-12 00:13:36,936:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F509DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002624F3199E0>)
2025-06-12 00:13:36,936:INFO:Checking exceptions
2025-06-12 00:13:36,936:INFO:Preloading libraries
2025-06-12 00:13:36,937:INFO:Set up data.
2025-06-12 00:13:36,939:INFO:Set up index.
2025-06-12 00:13:46,311:INFO:Initializing predict_model()
2025-06-12 00:13:46,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F508350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C58A0>)
2025-06-12 00:13:46,311:INFO:Checking exceptions
2025-06-12 00:13:46,311:INFO:Preloading libraries
2025-06-12 00:13:46,311:INFO:Set up data.
2025-06-12 00:13:46,313:INFO:Set up index.
2025-06-12 00:14:00,392:INFO:Initializing predict_model()
2025-06-12 00:14:00,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624E975DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C56C0>)
2025-06-12 00:14:00,392:INFO:Checking exceptions
2025-06-12 00:14:00,392:INFO:Preloading libraries
2025-06-12 00:14:00,392:INFO:Set up data.
2025-06-12 00:14:00,395:INFO:Set up index.
2025-06-12 00:14:07,138:INFO:Initializing predict_model()
2025-06-12 00:14:07,138:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002625051A4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002624EF1EA20>)
2025-06-12 00:14:07,138:INFO:Checking exceptions
2025-06-12 00:14:07,139:INFO:Preloading libraries
2025-06-12 00:14:07,139:INFO:Set up data.
2025-06-12 00:14:07,141:INFO:Set up index.
2025-06-12 00:14:20,209:INFO:Initializing predict_model()
2025-06-12 00:14:20,209:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026250511550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C5EE0>)
2025-06-12 00:14:20,209:INFO:Checking exceptions
2025-06-12 00:14:20,209:INFO:Preloading libraries
2025-06-12 00:14:20,210:INFO:Set up data.
2025-06-12 00:14:20,212:INFO:Set up index.
2025-06-12 00:22:32,103:INFO:Initializing predict_model()
2025-06-12 00:22:32,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002624F5096D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262505C5EE0>)
2025-06-12 00:22:32,103:INFO:Checking exceptions
2025-06-12 00:22:32,103:INFO:Preloading libraries
2025-06-12 00:22:32,103:INFO:Set up data.
2025-06-12 00:22:32,105:INFO:Set up index.
2025-06-12 00:23:18,984:INFO:Initializing predict_model()
2025-06-12 00:23:18,984:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026250512290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002624F3199E0>)
2025-06-12 00:23:18,984:INFO:Checking exceptions
2025-06-12 00:23:18,984:INFO:Preloading libraries
2025-06-12 00:23:18,984:INFO:Set up data.
2025-06-12 00:23:18,986:INFO:Set up index.
2025-06-12 00:24:15,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:24:15,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:24:15,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:24:15,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:24:16,100:INFO:Initializing load_model()
2025-06-12 00:24:16,100:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:26:05,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:05,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:05,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:05,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:05,201:INFO:Initializing load_model()
2025-06-12 00:26:05,201:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:26:27,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:27,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:27,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:27,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:26:28,130:INFO:Initializing load_model()
2025-06-12 00:26:28,131:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:29:05,846:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:05,846:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:05,846:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:05,846:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:05,987:INFO:Initializing load_model()
2025-06-12 00:29:05,987:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:29:13,356:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:13,356:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:13,356:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:13,356:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:29:13,516:INFO:Initializing load_model()
2025-06-12 00:29:13,516:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:30:26,292:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:26,292:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:26,292:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:26,292:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:26,431:INFO:Initializing load_model()
2025-06-12 00:30:26,431:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:30:33,620:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:33,620:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:33,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:33,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:30:33,763:INFO:Initializing load_model()
2025-06-12 00:30:33,763:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:32:10,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:10,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:10,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:10,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:10,234:INFO:Initializing load_model()
2025-06-12 00:32:10,234:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:32:24,213:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:24,213:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:24,213:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:24,213:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:32:24,353:INFO:Initializing load_model()
2025-06-12 00:32:24,353:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:37:43,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:37:43,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:37:43,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:37:43,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:37:47,295:INFO:PyCaret ClassificationExperiment
2025-06-12 00:37:47,295:INFO:Logging name: fintech_credit
2025-06-12 00:37:47,295:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-12 00:37:47,295:INFO:version 3.3.2
2025-06-12 00:37:47,295:INFO:Initializing setup()
2025-06-12 00:37:47,295:INFO:self.USI: 96c2
2025-06-12 00:37:47,295:INFO:self._variable_keys: {'USI', 'exp_id', 'idx', 'n_jobs_param', 'seed', '_available_plots', 'y_test', 'pipeline', 'fix_imbalance', 'exp_name_log', 'X_test', '_ml_usecase', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'memory', 'y_train', 'fold_groups_param', 'html_param', 'X', 'y', 'fold_generator', 'is_multiclass', 'X_train', 'gpu_param', 'target_param', 'gpu_n_jobs_param', 'data'}
2025-06-12 00:37:47,295:INFO:Checking environment
2025-06-12 00:37:47,295:INFO:python_version: 3.11.0
2025-06-12 00:37:47,295:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-12 00:37:47,295:INFO:machine: AMD64
2025-06-12 00:37:47,309:INFO:platform: Windows-10-10.0.19045-SP0
2025-06-12 00:37:47,313:INFO:Memory: svmem(total=34286215168, available=18251849728, percent=46.8, used=16034365440, free=18251849728)
2025-06-12 00:37:47,313:INFO:Physical Core: 6
2025-06-12 00:37:47,313:INFO:Logical Core: 12
2025-06-12 00:37:47,313:INFO:Checking libraries
2025-06-12 00:37:47,313:INFO:System:
2025-06-12 00:37:47,313:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-12 00:37:47,313:INFO:executable: C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\python.exe
2025-06-12 00:37:47,313:INFO:   machine: Windows-10-10.0.19045-SP0
2025-06-12 00:37:47,313:INFO:PyCaret required dependencies:
2025-06-12 00:37:47,398:INFO:                 pip: 22.3
2025-06-12 00:37:47,398:INFO:          setuptools: 65.5.0
2025-06-12 00:37:47,398:INFO:             pycaret: 3.3.2
2025-06-12 00:37:47,398:INFO:             IPython: 9.2.0
2025-06-12 00:37:47,398:INFO:          ipywidgets: 8.1.7
2025-06-12 00:37:47,398:INFO:                tqdm: 4.67.1
2025-06-12 00:37:47,398:INFO:               numpy: 1.25.2
2025-06-12 00:37:47,398:INFO:              pandas: 1.5.3
2025-06-12 00:37:47,398:INFO:              jinja2: 3.1.6
2025-06-12 00:37:47,398:INFO:               scipy: 1.10.1
2025-06-12 00:37:47,398:INFO:              joblib: 1.3.2
2025-06-12 00:37:47,398:INFO:             sklearn: 1.4.2
2025-06-12 00:37:47,398:INFO:                pyod: 2.0.5
2025-06-12 00:37:47,398:INFO:            imblearn: 0.12.4
2025-06-12 00:37:47,399:INFO:   category_encoders: 2.7.0
2025-06-12 00:37:47,399:INFO:            lightgbm: 4.6.0
2025-06-12 00:37:47,399:INFO:               numba: 0.61.0
2025-06-12 00:37:47,399:INFO:            requests: 2.32.3
2025-06-12 00:37:47,399:INFO:          matplotlib: 3.6.0
2025-06-12 00:37:47,399:INFO:          scikitplot: 0.3.7
2025-06-12 00:37:47,399:INFO:         yellowbrick: 1.5
2025-06-12 00:37:47,399:INFO:              plotly: 5.24.1
2025-06-12 00:37:47,399:INFO:    plotly-resampler: Not installed
2025-06-12 00:37:47,399:INFO:             kaleido: 0.2.1
2025-06-12 00:37:47,399:INFO:           schemdraw: 0.15
2025-06-12 00:37:47,399:INFO:         statsmodels: 0.14.4
2025-06-12 00:37:47,399:INFO:              sktime: 0.26.0
2025-06-12 00:37:47,399:INFO:               tbats: 1.1.3
2025-06-12 00:37:47,399:INFO:            pmdarima: 2.0.4
2025-06-12 00:37:47,399:INFO:              psutil: 7.0.0
2025-06-12 00:37:47,399:INFO:          markupsafe: 3.0.2
2025-06-12 00:37:47,399:INFO:             pickle5: Not installed
2025-06-12 00:37:47,399:INFO:         cloudpickle: 2.2.1
2025-06-12 00:37:47,399:INFO:         deprecation: 2.1.0
2025-06-12 00:37:47,399:INFO:              xxhash: 3.5.0
2025-06-12 00:37:47,399:INFO:           wurlitzer: Not installed
2025-06-12 00:37:47,399:INFO:PyCaret optional dependencies:
2025-06-12 00:37:47,881:INFO:                shap: 0.44.1
2025-06-12 00:37:47,881:INFO:           interpret: 0.6.10
2025-06-12 00:37:47,881:INFO:                umap: 0.5.7
2025-06-12 00:37:47,881:INFO:     ydata_profiling: 4.16.1
2025-06-12 00:37:47,881:INFO:  explainerdashboard: 0.4.8
2025-06-12 00:37:47,882:INFO:             autoviz: Not installed
2025-06-12 00:37:47,882:INFO:           fairlearn: 0.7.0
2025-06-12 00:37:47,882:INFO:          deepchecks: Not installed
2025-06-12 00:37:47,882:INFO:             xgboost: Not installed
2025-06-12 00:37:47,882:INFO:            catboost: Not installed
2025-06-12 00:37:47,882:INFO:              kmodes: Not installed
2025-06-12 00:37:47,882:INFO:             mlxtend: Not installed
2025-06-12 00:37:47,882:INFO:       statsforecast: Not installed
2025-06-12 00:37:47,882:INFO:        tune_sklearn: Not installed
2025-06-12 00:37:47,882:INFO:                 ray: Not installed
2025-06-12 00:37:47,882:INFO:            hyperopt: Not installed
2025-06-12 00:37:47,882:INFO:              optuna: Not installed
2025-06-12 00:37:47,882:INFO:               skopt: Not installed
2025-06-12 00:37:47,882:INFO:              mlflow: 2.22.0
2025-06-12 00:37:47,882:INFO:              gradio: Not installed
2025-06-12 00:37:47,882:INFO:             fastapi: 0.115.12
2025-06-12 00:37:47,882:INFO:             uvicorn: 0.34.2
2025-06-12 00:37:47,882:INFO:              m2cgen: Not installed
2025-06-12 00:37:47,882:INFO:           evidently: Not installed
2025-06-12 00:37:47,882:INFO:               fugue: Not installed
2025-06-12 00:37:47,882:INFO:           streamlit: 1.45.1
2025-06-12 00:37:47,882:INFO:             prophet: Not installed
2025-06-12 00:37:47,882:INFO:None
2025-06-12 00:37:47,882:INFO:Set up data.
2025-06-12 00:37:47,887:INFO:Set up folding strategy.
2025-06-12 00:37:47,887:INFO:Set up train/test split.
2025-06-12 00:37:47,891:INFO:Set up index.
2025-06-12 00:37:47,891:INFO:Assigning column types.
2025-06-12 00:37:47,893:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-12 00:37:47,936:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-12 00:37:47,939:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-12 00:37:47,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:47,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,010:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-12 00:37:48,011:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-12 00:37:48,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,038:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-12 00:37:48,075:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-12 00:37:48,097:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,135:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-12 00:37:48,157:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,158:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-12 00:37:48,218:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,278:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,278:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,282:INFO:Preparing preprocessing pipeline...
2025-06-12 00:37:48,282:INFO:Set up simple imputation.
2025-06-12 00:37:48,284:INFO:Set up encoding of categorical features.
2025-06-12 00:37:48,284:INFO:Set up imbalanced handling.
2025-06-12 00:37:48,336:INFO:Finished creating preprocessing pipeline.
2025-06-12 00:37:48,342:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2025-06-12 00:37:48,342:INFO:Creating final display dataframe.
2025-06-12 00:37:48,467:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         approved
2                   Target type           Binary
3           Original data shape        (1000, 8)
4        Transformed data shape       (1176, 10)
5   Transformed train set shape        (876, 10)
6    Transformed test set shape        (300, 10)
7              Numeric features                6
8          Categorical features                1
9                    Preprocess             True
10              Imputation type           simple
11           Numeric imputation             mean
12       Categorical imputation             mode
13     Maximum one-hot encoding               25
14              Encoding method             None
15                Fix imbalance             True
16         Fix imbalance method            smote
17               Fold Generator  StratifiedKFold
18                  Fold Number               10
19                     CPU Jobs               -1
20                      Use GPU            False
21               Log Experiment     MlflowLogger
22              Experiment Name   fintech_credit
23                          USI             96c2
2025-06-12 00:37:48,539:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,539:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,600:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,600:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-12 00:37:48,601:INFO:Logging experiment in loggers
2025-06-12 00:37:48,937:INFO:SubProcess save_model() called ==================================
2025-06-12 00:37:48,948:INFO:Initializing save_model()
2025-06-12 00:37:48,948:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), model_name=C:\Users\GGjoe\AppData\Local\Temp\tmpaj_46ko0\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-12 00:37:48,948:INFO:Adding model into prep_pipe
2025-06-12 00:37:48,948:WARNING:Only Model saved as it was a pipeline.
2025-06-12 00:37:48,953:INFO:C:\Users\GGjoe\AppData\Local\Temp\tmpaj_46ko0\Transformation Pipeline.pkl saved in current working directory
2025-06-12 00:37:48,961:INFO:Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False)
2025-06-12 00:37:48,961:INFO:save_model() successfully completed......................................
2025-06-12 00:37:49,016:INFO:SubProcess save_model() end ==================================
2025-06-12 00:37:49,132:INFO:setup() successfully completed in 1.31s...............
2025-06-12 00:37:49,132:INFO:Initializing compare_models()
2025-06-12 00:37:49,133:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-12 00:37:49,133:INFO:Checking exceptions
2025-06-12 00:37:49,135:INFO:Preparing display monitor
2025-06-12 00:37:49,137:INFO:Initializing Logistic Regression
2025-06-12 00:37:49,137:INFO:Total runtime is 0.0 minutes
2025-06-12 00:37:49,137:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:49,138:INFO:Initializing create_model()
2025-06-12 00:37:49,138:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:49,138:INFO:Checking exceptions
2025-06-12 00:37:49,138:INFO:Importing libraries
2025-06-12 00:37:49,138:INFO:Copying training dataset
2025-06-12 00:37:49,140:INFO:Defining folds
2025-06-12 00:37:49,140:INFO:Declaring metric variables
2025-06-12 00:37:49,140:INFO:Importing untrained model
2025-06-12 00:37:49,140:INFO:Logistic Regression Imported successfully
2025-06-12 00:37:49,141:INFO:Starting cross validation
2025-06-12 00:37:49,142:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:54,200:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,206:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,216:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,227:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,232:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,254:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,259:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,280:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,313:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-12 00:37:54,351:INFO:Calculating mean and std
2025-06-12 00:37:54,352:INFO:Creating metrics dataframe
2025-06-12 00:37:54,355:INFO:Uploading results into container
2025-06-12 00:37:54,356:INFO:Uploading model into container now
2025-06-12 00:37:54,356:INFO:_master_model_container: 1
2025-06-12 00:37:54,357:INFO:_display_container: 2
2025-06-12 00:37:54,357:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-12 00:37:54,357:INFO:create_model() successfully completed......................................
2025-06-12 00:37:54,415:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:54,415:INFO:Creating metrics dataframe
2025-06-12 00:37:54,418:INFO:Initializing K Neighbors Classifier
2025-06-12 00:37:54,418:INFO:Total runtime is 0.08800459702809652 minutes
2025-06-12 00:37:54,419:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:54,419:INFO:Initializing create_model()
2025-06-12 00:37:54,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:54,419:INFO:Checking exceptions
2025-06-12 00:37:54,419:INFO:Importing libraries
2025-06-12 00:37:54,419:INFO:Copying training dataset
2025-06-12 00:37:54,421:INFO:Defining folds
2025-06-12 00:37:54,421:INFO:Declaring metric variables
2025-06-12 00:37:54,421:INFO:Importing untrained model
2025-06-12 00:37:54,422:INFO:K Neighbors Classifier Imported successfully
2025-06-12 00:37:54,422:INFO:Starting cross validation
2025-06-12 00:37:54,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:57,193:INFO:Calculating mean and std
2025-06-12 00:37:57,194:INFO:Creating metrics dataframe
2025-06-12 00:37:57,196:INFO:Uploading results into container
2025-06-12 00:37:57,197:INFO:Uploading model into container now
2025-06-12 00:37:57,197:INFO:_master_model_container: 2
2025-06-12 00:37:57,197:INFO:_display_container: 2
2025-06-12 00:37:57,197:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-12 00:37:57,197:INFO:create_model() successfully completed......................................
2025-06-12 00:37:57,256:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:57,256:INFO:Creating metrics dataframe
2025-06-12 00:37:57,260:INFO:Initializing Naive Bayes
2025-06-12 00:37:57,260:INFO:Total runtime is 0.13537023067474366 minutes
2025-06-12 00:37:57,260:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:57,260:INFO:Initializing create_model()
2025-06-12 00:37:57,260:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:57,260:INFO:Checking exceptions
2025-06-12 00:37:57,260:INFO:Importing libraries
2025-06-12 00:37:57,260:INFO:Copying training dataset
2025-06-12 00:37:57,263:INFO:Defining folds
2025-06-12 00:37:57,263:INFO:Declaring metric variables
2025-06-12 00:37:57,263:INFO:Importing untrained model
2025-06-12 00:37:57,263:INFO:Naive Bayes Imported successfully
2025-06-12 00:37:57,263:INFO:Starting cross validation
2025-06-12 00:37:57,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:57,372:INFO:Calculating mean and std
2025-06-12 00:37:57,372:INFO:Creating metrics dataframe
2025-06-12 00:37:57,375:INFO:Uploading results into container
2025-06-12 00:37:57,375:INFO:Uploading model into container now
2025-06-12 00:37:57,375:INFO:_master_model_container: 3
2025-06-12 00:37:57,375:INFO:_display_container: 2
2025-06-12 00:37:57,376:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-12 00:37:57,376:INFO:create_model() successfully completed......................................
2025-06-12 00:37:57,433:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:57,433:INFO:Creating metrics dataframe
2025-06-12 00:37:57,437:INFO:Initializing Decision Tree Classifier
2025-06-12 00:37:57,437:INFO:Total runtime is 0.13832367261250814 minutes
2025-06-12 00:37:57,437:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:57,437:INFO:Initializing create_model()
2025-06-12 00:37:57,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:57,437:INFO:Checking exceptions
2025-06-12 00:37:57,437:INFO:Importing libraries
2025-06-12 00:37:57,437:INFO:Copying training dataset
2025-06-12 00:37:57,440:INFO:Defining folds
2025-06-12 00:37:57,440:INFO:Declaring metric variables
2025-06-12 00:37:57,440:INFO:Importing untrained model
2025-06-12 00:37:57,440:INFO:Decision Tree Classifier Imported successfully
2025-06-12 00:37:57,440:INFO:Starting cross validation
2025-06-12 00:37:57,441:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:57,551:INFO:Calculating mean and std
2025-06-12 00:37:57,551:INFO:Creating metrics dataframe
2025-06-12 00:37:57,554:INFO:Uploading results into container
2025-06-12 00:37:57,554:INFO:Uploading model into container now
2025-06-12 00:37:57,554:INFO:_master_model_container: 4
2025-06-12 00:37:57,554:INFO:_display_container: 2
2025-06-12 00:37:57,555:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-06-12 00:37:57,555:INFO:create_model() successfully completed......................................
2025-06-12 00:37:57,611:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:57,611:INFO:Creating metrics dataframe
2025-06-12 00:37:57,615:INFO:Initializing SVM - Linear Kernel
2025-06-12 00:37:57,615:INFO:Total runtime is 0.14128688971201578 minutes
2025-06-12 00:37:57,615:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:57,615:INFO:Initializing create_model()
2025-06-12 00:37:57,615:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:57,615:INFO:Checking exceptions
2025-06-12 00:37:57,615:INFO:Importing libraries
2025-06-12 00:37:57,615:INFO:Copying training dataset
2025-06-12 00:37:57,618:INFO:Defining folds
2025-06-12 00:37:57,618:INFO:Declaring metric variables
2025-06-12 00:37:57,618:INFO:Importing untrained model
2025-06-12 00:37:57,618:INFO:SVM - Linear Kernel Imported successfully
2025-06-12 00:37:57,618:INFO:Starting cross validation
2025-06-12 00:37:57,619:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:57,729:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:37:57,738:INFO:Calculating mean and std
2025-06-12 00:37:57,738:INFO:Creating metrics dataframe
2025-06-12 00:37:57,741:INFO:Uploading results into container
2025-06-12 00:37:57,741:INFO:Uploading model into container now
2025-06-12 00:37:57,741:INFO:_master_model_container: 5
2025-06-12 00:37:57,741:INFO:_display_container: 2
2025-06-12 00:37:57,742:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-12 00:37:57,742:INFO:create_model() successfully completed......................................
2025-06-12 00:37:57,798:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:57,799:INFO:Creating metrics dataframe
2025-06-12 00:37:57,802:INFO:Initializing Ridge Classifier
2025-06-12 00:37:57,802:INFO:Total runtime is 0.1444035490353902 minutes
2025-06-12 00:37:57,802:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:57,802:INFO:Initializing create_model()
2025-06-12 00:37:57,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:57,802:INFO:Checking exceptions
2025-06-12 00:37:57,802:INFO:Importing libraries
2025-06-12 00:37:57,802:INFO:Copying training dataset
2025-06-12 00:37:57,805:INFO:Defining folds
2025-06-12 00:37:57,805:INFO:Declaring metric variables
2025-06-12 00:37:57,805:INFO:Importing untrained model
2025-06-12 00:37:57,805:INFO:Ridge Classifier Imported successfully
2025-06-12 00:37:57,805:INFO:Starting cross validation
2025-06-12 00:37:57,806:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:57,920:INFO:Calculating mean and std
2025-06-12 00:37:57,920:INFO:Creating metrics dataframe
2025-06-12 00:37:57,923:INFO:Uploading results into container
2025-06-12 00:37:57,923:INFO:Uploading model into container now
2025-06-12 00:37:57,923:INFO:_master_model_container: 6
2025-06-12 00:37:57,923:INFO:_display_container: 2
2025-06-12 00:37:57,924:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-06-12 00:37:57,924:INFO:create_model() successfully completed......................................
2025-06-12 00:37:57,979:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:57,979:INFO:Creating metrics dataframe
2025-06-12 00:37:57,983:INFO:Initializing Random Forest Classifier
2025-06-12 00:37:57,983:INFO:Total runtime is 0.14742028315862019 minutes
2025-06-12 00:37:57,983:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:57,983:INFO:Initializing create_model()
2025-06-12 00:37:57,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:57,983:INFO:Checking exceptions
2025-06-12 00:37:57,983:INFO:Importing libraries
2025-06-12 00:37:57,983:INFO:Copying training dataset
2025-06-12 00:37:57,986:INFO:Defining folds
2025-06-12 00:37:57,986:INFO:Declaring metric variables
2025-06-12 00:37:57,986:INFO:Importing untrained model
2025-06-12 00:37:57,986:INFO:Random Forest Classifier Imported successfully
2025-06-12 00:37:57,986:INFO:Starting cross validation
2025-06-12 00:37:57,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:58,407:INFO:Calculating mean and std
2025-06-12 00:37:58,407:INFO:Creating metrics dataframe
2025-06-12 00:37:58,410:INFO:Uploading results into container
2025-06-12 00:37:58,410:INFO:Uploading model into container now
2025-06-12 00:37:58,410:INFO:_master_model_container: 7
2025-06-12 00:37:58,410:INFO:_display_container: 2
2025-06-12 00:37:58,411:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-06-12 00:37:58,411:INFO:create_model() successfully completed......................................
2025-06-12 00:37:58,467:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:58,467:INFO:Creating metrics dataframe
2025-06-12 00:37:58,470:INFO:Initializing Quadratic Discriminant Analysis
2025-06-12 00:37:58,470:INFO:Total runtime is 0.1555479884147644 minutes
2025-06-12 00:37:58,470:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:58,470:INFO:Initializing create_model()
2025-06-12 00:37:58,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:58,471:INFO:Checking exceptions
2025-06-12 00:37:58,471:INFO:Importing libraries
2025-06-12 00:37:58,471:INFO:Copying training dataset
2025-06-12 00:37:58,473:INFO:Defining folds
2025-06-12 00:37:58,473:INFO:Declaring metric variables
2025-06-12 00:37:58,473:INFO:Importing untrained model
2025-06-12 00:37:58,474:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-12 00:37:58,474:INFO:Starting cross validation
2025-06-12 00:37:58,474:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:58,542:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-12 00:37:58,542:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-12 00:37:58,542:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-12 00:37:58,542:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-12 00:37:58,542:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-12 00:37:58,592:INFO:Calculating mean and std
2025-06-12 00:37:58,592:INFO:Creating metrics dataframe
2025-06-12 00:37:58,595:INFO:Uploading results into container
2025-06-12 00:37:58,595:INFO:Uploading model into container now
2025-06-12 00:37:58,595:INFO:_master_model_container: 8
2025-06-12 00:37:58,595:INFO:_display_container: 2
2025-06-12 00:37:58,595:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-12 00:37:58,595:INFO:create_model() successfully completed......................................
2025-06-12 00:37:58,651:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:58,651:INFO:Creating metrics dataframe
2025-06-12 00:37:58,654:INFO:Initializing Ada Boost Classifier
2025-06-12 00:37:58,654:INFO:Total runtime is 0.15861421028772987 minutes
2025-06-12 00:37:58,654:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:58,654:INFO:Initializing create_model()
2025-06-12 00:37:58,654:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:58,655:INFO:Checking exceptions
2025-06-12 00:37:58,655:INFO:Importing libraries
2025-06-12 00:37:58,655:INFO:Copying training dataset
2025-06-12 00:37:58,657:INFO:Defining folds
2025-06-12 00:37:58,657:INFO:Declaring metric variables
2025-06-12 00:37:58,657:INFO:Importing untrained model
2025-06-12 00:37:58,657:INFO:Ada Boost Classifier Imported successfully
2025-06-12 00:37:58,657:INFO:Starting cross validation
2025-06-12 00:37:58,658:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,727:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:37:58,910:INFO:Calculating mean and std
2025-06-12 00:37:58,910:INFO:Creating metrics dataframe
2025-06-12 00:37:58,913:INFO:Uploading results into container
2025-06-12 00:37:58,913:INFO:Uploading model into container now
2025-06-12 00:37:58,913:INFO:_master_model_container: 9
2025-06-12 00:37:58,913:INFO:_display_container: 2
2025-06-12 00:37:58,913:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-12 00:37:58,913:INFO:create_model() successfully completed......................................
2025-06-12 00:37:58,968:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:58,968:INFO:Creating metrics dataframe
2025-06-12 00:37:58,972:INFO:Initializing Gradient Boosting Classifier
2025-06-12 00:37:58,972:INFO:Total runtime is 0.16391421159108477 minutes
2025-06-12 00:37:58,972:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:58,972:INFO:Initializing create_model()
2025-06-12 00:37:58,972:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:58,972:INFO:Checking exceptions
2025-06-12 00:37:58,973:INFO:Importing libraries
2025-06-12 00:37:58,973:INFO:Copying training dataset
2025-06-12 00:37:58,975:INFO:Defining folds
2025-06-12 00:37:58,975:INFO:Declaring metric variables
2025-06-12 00:37:58,975:INFO:Importing untrained model
2025-06-12 00:37:58,975:INFO:Gradient Boosting Classifier Imported successfully
2025-06-12 00:37:58,976:INFO:Starting cross validation
2025-06-12 00:37:58,976:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:59,327:INFO:Calculating mean and std
2025-06-12 00:37:59,327:INFO:Creating metrics dataframe
2025-06-12 00:37:59,330:INFO:Uploading results into container
2025-06-12 00:37:59,330:INFO:Uploading model into container now
2025-06-12 00:37:59,330:INFO:_master_model_container: 10
2025-06-12 00:37:59,330:INFO:_display_container: 2
2025-06-12 00:37:59,331:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-12 00:37:59,331:INFO:create_model() successfully completed......................................
2025-06-12 00:37:59,386:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:59,386:INFO:Creating metrics dataframe
2025-06-12 00:37:59,389:INFO:Initializing Linear Discriminant Analysis
2025-06-12 00:37:59,389:INFO:Total runtime is 0.1708645145098368 minutes
2025-06-12 00:37:59,389:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:59,389:INFO:Initializing create_model()
2025-06-12 00:37:59,390:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:59,390:INFO:Checking exceptions
2025-06-12 00:37:59,390:INFO:Importing libraries
2025-06-12 00:37:59,390:INFO:Copying training dataset
2025-06-12 00:37:59,392:INFO:Defining folds
2025-06-12 00:37:59,392:INFO:Declaring metric variables
2025-06-12 00:37:59,392:INFO:Importing untrained model
2025-06-12 00:37:59,392:INFO:Linear Discriminant Analysis Imported successfully
2025-06-12 00:37:59,392:INFO:Starting cross validation
2025-06-12 00:37:59,393:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:59,500:INFO:Calculating mean and std
2025-06-12 00:37:59,500:INFO:Creating metrics dataframe
2025-06-12 00:37:59,503:INFO:Uploading results into container
2025-06-12 00:37:59,503:INFO:Uploading model into container now
2025-06-12 00:37:59,503:INFO:_master_model_container: 11
2025-06-12 00:37:59,503:INFO:_display_container: 2
2025-06-12 00:37:59,503:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-12 00:37:59,503:INFO:create_model() successfully completed......................................
2025-06-12 00:37:59,563:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:59,563:INFO:Creating metrics dataframe
2025-06-12 00:37:59,567:INFO:Initializing Extra Trees Classifier
2025-06-12 00:37:59,568:INFO:Total runtime is 0.17383777697881062 minutes
2025-06-12 00:37:59,568:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:59,568:INFO:Initializing create_model()
2025-06-12 00:37:59,568:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:59,568:INFO:Checking exceptions
2025-06-12 00:37:59,568:INFO:Importing libraries
2025-06-12 00:37:59,568:INFO:Copying training dataset
2025-06-12 00:37:59,570:INFO:Defining folds
2025-06-12 00:37:59,571:INFO:Declaring metric variables
2025-06-12 00:37:59,571:INFO:Importing untrained model
2025-06-12 00:37:59,571:INFO:Extra Trees Classifier Imported successfully
2025-06-12 00:37:59,571:INFO:Starting cross validation
2025-06-12 00:37:59,572:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:37:59,908:INFO:Calculating mean and std
2025-06-12 00:37:59,908:INFO:Creating metrics dataframe
2025-06-12 00:37:59,911:INFO:Uploading results into container
2025-06-12 00:37:59,911:INFO:Uploading model into container now
2025-06-12 00:37:59,911:INFO:_master_model_container: 12
2025-06-12 00:37:59,911:INFO:_display_container: 2
2025-06-12 00:37:59,911:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-06-12 00:37:59,912:INFO:create_model() successfully completed......................................
2025-06-12 00:37:59,967:INFO:SubProcess create_model() end ==================================
2025-06-12 00:37:59,967:INFO:Creating metrics dataframe
2025-06-12 00:37:59,970:INFO:Initializing Light Gradient Boosting Machine
2025-06-12 00:37:59,970:INFO:Total runtime is 0.1805399974187215 minutes
2025-06-12 00:37:59,970:INFO:SubProcess create_model() called ==================================
2025-06-12 00:37:59,971:INFO:Initializing create_model()
2025-06-12 00:37:59,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:37:59,971:INFO:Checking exceptions
2025-06-12 00:37:59,971:INFO:Importing libraries
2025-06-12 00:37:59,971:INFO:Copying training dataset
2025-06-12 00:37:59,973:INFO:Defining folds
2025-06-12 00:37:59,973:INFO:Declaring metric variables
2025-06-12 00:37:59,973:INFO:Importing untrained model
2025-06-12 00:37:59,974:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-12 00:37:59,974:INFO:Starting cross validation
2025-06-12 00:37:59,975:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:38:00,798:INFO:Calculating mean and std
2025-06-12 00:38:00,799:INFO:Creating metrics dataframe
2025-06-12 00:38:00,802:INFO:Uploading results into container
2025-06-12 00:38:00,802:INFO:Uploading model into container now
2025-06-12 00:38:00,802:INFO:_master_model_container: 13
2025-06-12 00:38:00,802:INFO:_display_container: 2
2025-06-12 00:38:00,803:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-12 00:38:00,803:INFO:create_model() successfully completed......................................
2025-06-12 00:38:00,871:INFO:SubProcess create_model() end ==================================
2025-06-12 00:38:00,871:INFO:Creating metrics dataframe
2025-06-12 00:38:00,877:INFO:Initializing Dummy Classifier
2025-06-12 00:38:00,877:INFO:Total runtime is 0.1956647237141927 minutes
2025-06-12 00:38:00,877:INFO:SubProcess create_model() called ==================================
2025-06-12 00:38:00,877:INFO:Initializing create_model()
2025-06-12 00:38:00,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019976201750>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:38:00,878:INFO:Checking exceptions
2025-06-12 00:38:00,878:INFO:Importing libraries
2025-06-12 00:38:00,878:INFO:Copying training dataset
2025-06-12 00:38:00,881:INFO:Defining folds
2025-06-12 00:38:00,881:INFO:Declaring metric variables
2025-06-12 00:38:00,881:INFO:Importing untrained model
2025-06-12 00:38:00,881:INFO:Dummy Classifier Imported successfully
2025-06-12 00:38:00,881:INFO:Starting cross validation
2025-06-12 00:38:00,882:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-12 00:38:00,981:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:00,986:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:00,992:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:00,997:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:00,999:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,002:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,004:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,005:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,006:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,007:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-06-12 00:38:01,013:INFO:Calculating mean and std
2025-06-12 00:38:01,013:INFO:Creating metrics dataframe
2025-06-12 00:38:01,016:INFO:Uploading results into container
2025-06-12 00:38:01,016:INFO:Uploading model into container now
2025-06-12 00:38:01,016:INFO:_master_model_container: 14
2025-06-12 00:38:01,016:INFO:_display_container: 2
2025-06-12 00:38:01,016:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-06-12 00:38:01,016:INFO:create_model() successfully completed......................................
2025-06-12 00:38:01,073:INFO:SubProcess create_model() end ==================================
2025-06-12 00:38:01,073:INFO:Creating metrics dataframe
2025-06-12 00:38:01,078:INFO:Initializing create_model()
2025-06-12 00:38:01,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-12 00:38:01,078:INFO:Checking exceptions
2025-06-12 00:38:01,079:INFO:Importing libraries
2025-06-12 00:38:01,079:INFO:Copying training dataset
2025-06-12 00:38:01,081:INFO:Defining folds
2025-06-12 00:38:01,081:INFO:Declaring metric variables
2025-06-12 00:38:01,081:INFO:Importing untrained model
2025-06-12 00:38:01,081:INFO:Declaring custom model
2025-06-12 00:38:01,081:INFO:Ada Boost Classifier Imported successfully
2025-06-12 00:38:01,082:INFO:Cross validation set to False
2025-06-12 00:38:01,082:INFO:Fitting Model
2025-06-12 00:38:01,111:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-06-12 00:38:01,187:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-12 00:38:01,187:INFO:create_model() successfully completed......................................
2025-06-12 00:38:01,243:INFO:Creating Dashboard logs
2025-06-12 00:38:01,243:INFO:Model: Ada Boost Classifier
2025-06-12 00:38:01,366:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 123}
2025-06-12 00:38:01,611:INFO:Initializing predict_model()
2025-06-12 00:38:01,612:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019973683090>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001997622C860>)
2025-06-12 00:38:01,612:INFO:Checking exceptions
2025-06-12 00:38:01,612:INFO:Preloading libraries
2025-06-12 00:38:01,775:WARNING:C:\Users\GGjoe\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-12 00:38:01,949:INFO:Creating Dashboard logs
2025-06-12 00:38:01,949:INFO:Model: Light Gradient Boosting Machine
2025-06-12 00:38:02,022:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-12 00:38:02,429:INFO:Creating Dashboard logs
2025-06-12 00:38:02,429:INFO:Model: Decision Tree Classifier
2025-06-12 00:38:02,502:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 123, 'splitter': 'best'}
2025-06-12 00:38:02,907:INFO:Creating Dashboard logs
2025-06-12 00:38:02,907:INFO:Model: Random Forest Classifier
2025-06-12 00:38:03,005:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-06-12 00:38:03,415:INFO:Creating Dashboard logs
2025-06-12 00:38:03,415:INFO:Model: Gradient Boosting Classifier
2025-06-12 00:38:03,488:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 123, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-12 00:38:03,914:INFO:Creating Dashboard logs
2025-06-12 00:38:03,914:INFO:Model: Extra Trees Classifier
2025-06-12 00:38:03,999:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-06-12 00:38:04,403:INFO:Creating Dashboard logs
2025-06-12 00:38:04,404:INFO:Model: Logistic Regression
2025-06-12 00:38:04,475:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 123, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-06-12 00:38:04,880:INFO:Creating Dashboard logs
2025-06-12 00:38:04,880:INFO:Model: Ridge Classifier
2025-06-12 00:38:04,948:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 123, 'solver': 'auto', 'tol': 0.0001}
2025-06-12 00:38:05,350:INFO:Creating Dashboard logs
2025-06-12 00:38:05,350:INFO:Model: Linear Discriminant Analysis
2025-06-12 00:38:05,419:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-06-12 00:38:05,809:INFO:Creating Dashboard logs
2025-06-12 00:38:05,809:INFO:Model: Naive Bayes
2025-06-12 00:38:05,882:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-06-12 00:38:06,272:INFO:Creating Dashboard logs
2025-06-12 00:38:06,272:INFO:Model: K Neighbors Classifier
2025-06-12 00:38:06,343:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-06-12 00:38:06,801:INFO:Creating Dashboard logs
2025-06-12 00:38:06,801:INFO:Model: Quadratic Discriminant Analysis
2025-06-12 00:38:06,876:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-06-12 00:38:07,274:INFO:Creating Dashboard logs
2025-06-12 00:38:07,274:INFO:Model: Dummy Classifier
2025-06-12 00:38:07,346:INFO:Logged params: {'constant': None, 'random_state': 123, 'strategy': 'prior'}
2025-06-12 00:38:07,723:INFO:Creating Dashboard logs
2025-06-12 00:38:07,723:INFO:Model: SVM - Linear Kernel
2025-06-12 00:38:07,797:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 123, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-12 00:38:08,228:INFO:_master_model_container: 14
2025-06-12 00:38:08,229:INFO:_display_container: 2
2025-06-12 00:38:08,229:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-06-12 00:38:08,229:INFO:compare_models() successfully completed......................................
2025-06-12 00:38:08,234:INFO:Initializing save_model()
2025-06-12 00:38:08,235:INFO:save_model(model=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123), model_name=propension_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\GGjoe\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto'))))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-12 00:38:08,235:INFO:Adding model into prep_pipe
2025-06-12 00:38:08,251:INFO:propension_model.pkl saved in current working directory
2025-06-12 00:38:08,257:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('balance',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=FixImbalancer(estimator=SMOTE(k_neighbors=5,
                                                                              n_jobs=None,
                                                                              random_state=123,
                                                                              sampling_strategy='auto')))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=123))],
         verbose=False)
2025-06-12 00:38:08,257:INFO:save_model() successfully completed......................................
2025-06-12 00:38:25,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:25,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:25,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:25,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:25,526:INFO:Initializing load_model()
2025-06-12 00:38:25,527:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:38:46,594:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:46,595:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:46,595:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:46,595:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:38:46,745:INFO:Initializing load_model()
2025-06-12 00:38:46,745:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:42:28,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:28,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:28,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:28,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:28,186:INFO:Initializing load_model()
2025-06-12 00:42:28,186:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:42:40,504:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:40,504:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:40,504:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:40,504:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:42:40,648:INFO:Initializing load_model()
2025-06-12 00:42:40,648:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:57:37,181:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:37,181:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:37,181:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:37,181:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:37,318:INFO:Initializing load_model()
2025-06-12 00:57:37,318:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:57:45,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:45,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:45,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:45,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:57:45,919:INFO:Initializing load_model()
2025-06-12 00:57:45,920:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:58:59,917:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:58:59,917:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:58:59,917:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:58:59,917:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:59:00,094:INFO:Initializing load_model()
2025-06-12 00:59:00,094:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 00:59:09,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:59:09,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:59:09,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:59:09,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 00:59:09,705:INFO:Initializing load_model()
2025-06-12 00:59:09,705:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:07:51,605:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:07:51,605:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:07:51,605:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:07:51,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:07:53,199:INFO:Initializing load_model()
2025-06-12 01:07:53,199:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:08:00,596:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:00,596:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:00,596:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:00,597:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:02,218:INFO:Initializing load_model()
2025-06-12 01:08:02,218:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:08:19,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:19,022:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:19,022:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:19,022:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:20,639:INFO:Initializing load_model()
2025-06-12 01:08:20,639:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:08:27,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:27,565:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:27,566:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:27,566:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:08:29,139:INFO:Initializing load_model()
2025-06-12 01:08:29,139:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:08:38,534:INFO:Initializing predict_model()
2025-06-12 01:08:38,534:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019A9A902210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019A9A12B740>)
2025-06-12 01:08:38,534:INFO:Checking exceptions
2025-06-12 01:08:38,534:INFO:Preloading libraries
2025-06-12 01:08:38,534:INFO:Set up data.
2025-06-12 01:08:38,537:INFO:Set up index.
2025-06-12 01:08:39,975:INFO:Initializing predict_model()
2025-06-12 01:08:39,975:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019AD3869F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019AD38FB880>)
2025-06-12 01:08:39,975:INFO:Checking exceptions
2025-06-12 01:08:39,975:INFO:Preloading libraries
2025-06-12 01:08:39,975:INFO:Set up data.
2025-06-12 01:08:39,977:INFO:Set up index.
2025-06-12 01:08:41,644:INFO:Initializing predict_model()
2025-06-12 01:08:41,644:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000019AD390B810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019AD394B740>)
2025-06-12 01:08:41,644:INFO:Checking exceptions
2025-06-12 01:08:41,644:INFO:Preloading libraries
2025-06-12 01:08:41,644:INFO:Set up data.
2025-06-12 01:08:41,647:INFO:Set up index.
2025-06-12 01:09:58,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:09:58,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:09:58,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:09:58,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:10:00,373:INFO:Initializing load_model()
2025-06-12 01:10:00,373:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:10:06,508:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:10:06,508:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:10:06,508:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:10:06,508:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-12 01:10:08,082:INFO:Initializing load_model()
2025-06-12 01:10:08,082:INFO:load_model(model_name=propension_model, platform=None, authentication=None, verbose=True)
2025-06-12 01:10:21,690:INFO:Initializing predict_model()
2025-06-12 01:10:21,691:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E893E52D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E8DBCDB740>)
2025-06-12 01:10:21,691:INFO:Checking exceptions
2025-06-12 01:10:21,691:INFO:Preloading libraries
2025-06-12 01:10:21,691:INFO:Set up data.
2025-06-12 01:10:21,694:INFO:Set up index.
2025-06-12 01:10:22,724:INFO:Initializing predict_model()
2025-06-12 01:10:22,724:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895595650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E895639F80>)
2025-06-12 01:10:22,724:INFO:Checking exceptions
2025-06-12 01:10:22,724:INFO:Preloading libraries
2025-06-12 01:10:22,725:INFO:Set up data.
2025-06-12 01:10:22,727:INFO:Set up index.
2025-06-12 01:16:14,194:INFO:Initializing predict_model()
2025-06-12 01:16:14,194:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895592190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E8DBCDB740>)
2025-06-12 01:16:14,194:INFO:Checking exceptions
2025-06-12 01:16:14,194:INFO:Preloading libraries
2025-06-12 01:16:14,195:INFO:Set up data.
2025-06-12 01:16:14,197:INFO:Set up index.
2025-06-12 01:17:02,883:INFO:Initializing predict_model()
2025-06-12 01:17:02,883:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895597C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E895639E40>)
2025-06-12 01:17:02,883:INFO:Checking exceptions
2025-06-12 01:17:02,883:INFO:Preloading libraries
2025-06-12 01:17:02,883:INFO:Set up data.
2025-06-12 01:17:02,886:INFO:Set up index.
2025-06-12 01:23:36,027:INFO:Initializing predict_model()
2025-06-12 01:23:36,027:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895595F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E89563A160>)
2025-06-12 01:23:36,027:INFO:Checking exceptions
2025-06-12 01:23:36,027:INFO:Preloading libraries
2025-06-12 01:23:36,027:INFO:Set up data.
2025-06-12 01:23:36,030:INFO:Set up index.
2025-06-12 01:23:41,739:INFO:Initializing predict_model()
2025-06-12 01:23:41,739:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895583F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E8DBCDB740>)
2025-06-12 01:23:41,739:INFO:Checking exceptions
2025-06-12 01:23:41,739:INFO:Preloading libraries
2025-06-12 01:23:41,739:INFO:Set up data.
2025-06-12 01:23:41,742:INFO:Set up index.
2025-06-12 01:23:46,431:INFO:Initializing predict_model()
2025-06-12 01:23:46,431:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E895588A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'monthly_income_usd',
                                             'app_usage_score',
                                             'digital_profile_strength',
                                             'num_contacts_uploaded',
                                             'political_event_last_month'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['residence_risk_zone'],
                                    transformer=OneHotEncoder(cols=['residence_risk_zone'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=SMOTE(random_state=123)))),
                ('trained_model', AdaBoostClassifier(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E895639F80>)
2025-06-12 01:23:46,431:INFO:Checking exceptions
2025-06-12 01:23:46,431:INFO:Preloading libraries
2025-06-12 01:23:46,431:INFO:Set up data.
2025-06-12 01:23:46,433:INFO:Set up index.
